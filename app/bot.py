import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from .keyboards import MAIN_MENU, SPREADS_KB, preview_kb, final_kb
from .spreads import SPREAD_BY_ID
from .deck import draw_cards
from .utils import md_escape, render_cards_md, rounded_image_path
from .llm import build_interpretation

# ---- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ----
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN")

# ---- –î–∏—Å–ø–µ—Ç—á–µ—Ä ----
dp = Dispatcher()


# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è ----
class Form(StatesGroup):
    waiting_question = State()
    chosen_spread = State()


# ---- –•–µ–Ω–¥–ª–µ—Ä—ã ----
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>White Fox</b> ü¶ä‚ú®\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU
    )


@dp.callback_query(F.data == "help")
async def on_help(cb: types.CallbackQuery):
    await cb.message.edit_text(
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1) –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "2) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ (–∫–Ω–æ–ø–∫–∏ 2√ó4).\n"
        "3) –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç.",
        reply_markup=MAIN_MENU
    )
    await cb.answer()


@dp.callback_query(F.data == "about")
async def on_about(cb: types.CallbackQuery):
    await cb.message.edit_text(
        "–ö–æ–ª–æ–¥a <b>White Fox</b> ‚Äî –º–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. üé¥\n"
        "–ú—ã –¥–µ–ª–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –∫–æ–ª–æ–¥—ã –∏ —á–µ—Å—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã.",
        reply_markup=MAIN_MENU
    )
    await cb.answer()


@dp.callback_query(F.data == "ask")
async def on_ask(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_question)
    await cb.message.edit_text(
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> ‚úçÔ∏è\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é?¬ª\n"
        "‚Ä¢ ¬´–ß—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?¬ª\n"
        "‚Ä¢ ¬´–í –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –∫–∞—Ä—å–µ—Ä–µ?¬ª"
    )
    await cb.answer()


@dp.message(Form.waiting_question)
async def on_question(msg: types.Message, state: FSMContext):
    question = (msg.text or "").strip()
    await state.update_data(question=question)
    await state.set_state(Form.chosen_spread)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=SPREADS_KB)


@dp.callback_query(F.data.startswith("spread:"), Form.chosen_spread)
async def on_spread(cb: types.CallbackQuery, state: FSMContext):
    _, spread_id = cb.data.split(":")
    spread = SPREAD_BY_ID[spread_id]
    await state.update_data(spread_id=spread_id)

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ö–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    scheme_path = None
    for ext in ("png", "jpg", "jpeg"):
        p = os.path.join("media", "spreads", f"{spread_id}.{ext}")
        if os.path.exists(p):
            scheme_path = p
            break

    caption = f"<b>{spread.title}</b>\n\n–ü–æ–∑–∏—Ü–∏–∏: " + ", ".join(spread.positions)

    if scheme_path:
        try:
            await cb.message.answer_photo(
                FSInputFile(scheme_path),
                caption=caption + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=preview_kb(spread_id),
            )
        except Exception:
            await cb.message.edit_text(
                caption + "\n\n(–°—Ö–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—Å—Ç–æ–≤–∫—É)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=preview_kb(spread_id)
            )
    else:
        await cb.message.edit_text(
            caption + "\n\n(–°—Ö–µ–º–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=preview_kb(spread_id)
        )

    await cb.answer()


# ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´–ù–∞–∑–∞–¥¬ª: —É–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é (—Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
@dp.callback_query(F.data == "back_to_spreads")
async def back_to_spreads(cb: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∏ –ø—Ä–µ–≤—å—é, –∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å–∫–ª–∞–¥–∞."""
    await state.set_state(Form.chosen_spread)
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–µ–≤—å—é)
        await cb.message.delete()
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await cb.message.chat.delete_message(cb.message.message_id - 1)
    except Exception:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥"
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=SPREADS_KB)
    await cb.answer()


# üîÅ –ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ ‚Üí –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ ‚Üí –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ‚Üí —Ñ–∏–Ω–∞–ª
@dp.callback_query(F.data.startswith("shuffle:"))
async def on_shuffle(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    spread_id = data.get("spread_id")
    question = data.get("question", "")
    if not spread_id:
        await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥.")
        await cb.answer()
        return

    spread = SPREAD_BY_ID[spread_id]

    await cb.message.answer("–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è‚Ä¶ üîÅ")

    k = len(spread.positions)
    drawn = draw_cards(k, reversed_enabled=True)

    pairs: list[dict] = []

    for pos_name, (card, is_rev) in zip(spread.positions, drawn):
        shown_name = card.name + (" (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_rev else "")

        # –î–ª—è –ò–ò
        pairs.append({
            "position": pos_name,
            "name": card.name,
            "reversed": is_rev,
            "theses": getattr(card, "meanings", {"upright": "", "reversed": ""}),
        })

        caption = f"–ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è‚Ä¶ ‚ú®\n<b>{md_escape(pos_name)}</b> ‚Äî {md_escape(shown_name)}"

        # –°–∫—Ä—É–≥–ª—è–µ–º —É–≥–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        photo_path = None
        if card.image_path and os.path.exists(card.image_path):
            photo_path = rounded_image_path(card.image_path, radius=48) or card.image_path

        if photo_path and os.path.exists(photo_path):
            try:
                await cb.message.answer_photo(FSInputFile(photo_path), caption=caption)
            except Exception:
                await cb.message.answer(caption)
        else:
            await cb.message.answer(caption)

        await asyncio.sleep(0.15)

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π (hints)
    if getattr(spread, "hints", None) and len(spread.hints) == len(spread.positions):
        hints = spread.hints
    else:
        hints = [""] * len(spread.positions)

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    interp = await build_interpretation(
        question=question,
        spread_title=spread.title,
        pairs=pairs,
        position_hints=hints
    )

    cards_md = render_cards_md(interp.get("cards", []))
    summary = md_escape(interp.get("summary", ""))

    # –ò—Ç–æ–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ "–ü—É—Ç—å (3 –∫–∞—Ä—Ç—ã)" ‚Äî id="path"
    show_summary = (spread.id != "path")

    final_text = f"<b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n{cards_md}"
    if show_summary:
        final_text += f"\n\n<b>–ò—Ç–æ–≥:</b> {summary}\n\nüåô –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –ë–µ–ª–∞—è –õ–∏—Å–∏—Ü–∞ —Ä—è–¥–æ–º."

    await cb.message.answer(final_text, reply_markup=final_kb())
    await cb.answer()


# –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "new")
async def on_new(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)
    await cb.answer()


# ---- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----
async def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ—Ç TG_BOT_TOKEN –≤ .env")
    bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
